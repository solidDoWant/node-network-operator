{
  "description": "Link is the Schema for the links API",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "spec defines the desired state of Link",
      "properties": {
        "bridge": {
          "description": "Bridge defines the desired state of the link as a bridge.",
          "properties": {
            "mtu": {
              "description": "MTU is the maximum transmission unit for the bridge interface.\nThis should be at least as large as the largest frame payload that will be sent over the bridge.\nIf not specified, the default MTU for the node will be used.",
              "format": "int32",
              "maximum": 65535,
              "minimum": 68,
              "type": "integer"
            }
          },
          "type": "object",
          "additionalProperties": false
        },
        "interfaceName": {
          "description": "LinkName is the name that should be used for the actual network link.\nIf a link interface with this name already exists, it will be adopted.\nIf it does not exist, a new link will be created.\nIt is the responsibility of the user to ensure that the link name is unique across selected nodes.",
          "maxLength": 15,
          "pattern": "^[^\\s/]+$",
          "type": "string"
        },
        "nodeSelector": {
          "description": "NodeSelector is used to select nodes that the link should be deployed to.",
          "properties": {
            "matchExpressions": {
              "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
              "items": {
                "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                "properties": {
                  "key": {
                    "description": "key is the label key that the selector applies to.",
                    "type": "string"
                  },
                  "operator": {
                    "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                    "type": "string"
                  },
                  "values": {
                    "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array",
                    "x-kubernetes-list-type": "atomic"
                  }
                },
                "required": [
                  "key",
                  "operator"
                ],
                "type": "object",
                "additionalProperties": false
              },
              "type": "array",
              "x-kubernetes-list-type": "atomic"
            },
            "matchLabels": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
              "type": "object"
            }
          },
          "type": "object",
          "x-kubernetes-map-type": "atomic",
          "additionalProperties": false
        },
        "vxlan": {
          "description": "VXLAN defines the desired state of the link as a VXLAN.",
          "properties": {
            "device": {
              "description": "Device is the network interface used for vxlan-encapsulated traffic.\nIf not specified, the default is to use the first interface that netlink can use when sending traffic to the\nmulticast address - effectively `ip route get <multicast address>`.\nNote: Setting this will cause netlink to delete the vxlan link immediately if the referenced device is deleted.",
              "properties": {
                "name": {
                  "description": "Name is the name of the referenced link resource.",
                  "type": "string"
                },
                "optional": {
                  "default": false,
                  "description": "Optional specifies whether the link reference is optional. If false, the link\nwill be brought down if the referenced link is not found, or is not ready.\nWarning: setting this to \"true\" could situationally lead to packets not matching\nthe correct netfilter rules, resulting in traffic passed, dropped, or misrouted.",
                  "type": "boolean"
                },
                "setDownOnDependencyUpdate": {
                  "default": true,
                  "description": "SetDownOnDependencyUpdate specifies whether the link should be brought down when\nthe dependency link is updated. Under certain specific conditions, when a dependency\nlink is updated, the dependent link may temporarily be a part of an undesired\ndependency chain. This can lead to packets being sent over the wrong link, or dropped.\nSetting this to true will cause the link to be brought down when the dependency link,\nor any of its dependencies, are updated. It will be brought back up once all dependencies\nare in their desired states.\n\nHere is an example of when this can happen when this option is false (\"linkA -> linkB\"\nmeans \"linkA is the master of linkB\"):\nStarting state: linkA -> linkB -> linkC, linkD, linkE\nDesired state: linkA, linkD -> linkB, linkE -> linkC\nIf linkB is updated prior to linkC, then the interfaces will have an intermediate state of:\nlinkA, linkD -> linkB -> linkC, linkE\nIn this state, traffic that is supposed to go over linkE via the desired linkE -> linkC\nchain will instead be sent over linkB. By setting this to \"true\", linkC will be brought\ndown when linkB is updated, and brought back up after it moves to linkE, preventing this\nissue.",
                  "type": "boolean"
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "master": {
              "description": "Master is the link that this VXLAN interface will be enslaved to.\nThis is typically a bridge interface.",
              "properties": {
                "name": {
                  "description": "Name is the name of the referenced link resource.",
                  "type": "string"
                },
                "optional": {
                  "default": false,
                  "description": "Optional specifies whether the link reference is optional. If false, the link\nwill be brought down if the referenced link is not found, or is not ready.\nWarning: setting this to \"true\" could situationally lead to packets not matching\nthe correct netfilter rules, resulting in traffic passed, dropped, or misrouted.",
                  "type": "boolean"
                },
                "setDownOnDependencyUpdate": {
                  "default": true,
                  "description": "SetDownOnDependencyUpdate specifies whether the link should be brought down when\nthe dependency link is updated. Under certain specific conditions, when a dependency\nlink is updated, the dependent link may temporarily be a part of an undesired\ndependency chain. This can lead to packets being sent over the wrong link, or dropped.\nSetting this to true will cause the link to be brought down when the dependency link,\nor any of its dependencies, are updated. It will be brought back up once all dependencies\nare in their desired states.\n\nHere is an example of when this can happen when this option is false (\"linkA -> linkB\"\nmeans \"linkA is the master of linkB\"):\nStarting state: linkA -> linkB -> linkC, linkD, linkE\nDesired state: linkA, linkD -> linkB, linkE -> linkC\nIf linkB is updated prior to linkC, then the interfaces will have an intermediate state of:\nlinkA, linkD -> linkB -> linkC, linkE\nIn this state, traffic that is supposed to go over linkE via the desired linkE -> linkC\nchain will instead be sent over linkB. By setting this to \"true\", linkC will be brought\ndown when linkB is updated, and brought back up after it moves to linkE, preventing this\nissue.",
                  "type": "boolean"
                }
              },
              "required": [
                "name"
              ],
              "type": "object",
              "additionalProperties": false
            },
            "mtu": {
              "description": "MTU is the maximum transmission unit for the VXLAN interface.\nThis should be at least as large as the largest frame payload that will be sent over the VXLAN tunnel, but less\nthat then MTU of the master (if any).\nIf not specified, the default MTU for the node will be used.",
              "format": "int32",
              "maximum": 65535,
              "minimum": 68,
              "type": "integer"
            },
            "port": {
              "default": 4789,
              "description": "RemotePort is the remote VTEP UDP port used for VXLAN encapsulation.\nMultiple VTEPS can share the same port, as long as they have different VNIDs.",
              "format": "int32",
              "maximum": 65535,
              "minimum": 1,
              "type": "integer"
            },
            "remoteIPAddress": {
              "description": "RemoteIPAddress defines the remote VTEP(s) for VXLAN traffic. This can refer to a single\nhost, or a multicast group.",
              "format": "ipv4",
              "type": "string"
            },
            "sourcePort": {
              "default": {
                "end": 4789,
                "start": 4789
              },
              "description": "SourcePort is the source UDP port used for VXLAN encapsulation.",
              "properties": {
                "end": {
                  "description": "End is the ending port of the range.",
                  "format": "int32",
                  "maximum": 65535,
                  "minimum": 1,
                  "type": "integer"
                },
                "start": {
                  "description": "Start is the starting port of the range.",
                  "format": "int32",
                  "maximum": 65535,
                  "minimum": 1,
                  "type": "integer"
                }
              },
              "required": [
                "end",
                "start"
              ],
              "type": "object",
              "x-kubernetes-validations": [
                {
                  "message": "end must be greater than or equal to start",
                  "rule": "self.end >= self.start"
                }
              ],
              "additionalProperties": false
            },
            "vnid": {
              "description": "VNID is the Virtual Network Identifier for the underlay network.\nNote: Only one VXLAN interface with a given VNID can exist on a node. This is not validated\nby the operator, and is the responsibility of the user to ensure this is unique across\nall VXLAN links on the node. Deploying multiple VXLAN links with the same VNID will result\nin the operator repeatedly trying to create the link, and failing.",
              "format": "int32",
              "maximum": 16777215,
              "minimum": 1,
              "type": "integer"
            }
          },
          "type": "object",
          "additionalProperties": false
        }
      },
      "required": [
        "interfaceName"
      ],
      "type": "object",
      "x-kubernetes-validations": [
        {
          "message": "exactly one of the fields in [bridge vxlan] must be set",
          "rule": "[has(self.bridge),has(self.vxlan)].filter(x,x==true).size() == 1"
        }
      ],
      "additionalProperties": false
    },
    "status": {
      "description": "status defines the observed state of Link",
      "properties": {
        "conditions": {
          "description": "Conditions is a list of conditions that apply to the bridge configuration.",
          "items": {
            "description": "Condition contains details for one aspect of the current state of this API Resource.",
            "properties": {
              "lastTransitionTime": {
                "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                "format": "date-time",
                "type": "string"
              },
              "message": {
                "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                "maxLength": 32768,
                "type": "string"
              },
              "observedGeneration": {
                "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "format": "int64",
                "minimum": 0,
                "type": "integer"
              },
              "reason": {
                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                "maxLength": 1024,
                "minLength": 1,
                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
                "type": "string"
              },
              "status": {
                "description": "status of the condition, one of True, False, Unknown.",
                "enum": [
                  "True",
                  "False",
                  "Unknown"
                ],
                "type": "string"
              },
              "type": {
                "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
                "maxLength": 316,
                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
                "type": "string"
              }
            },
            "required": [
              "lastTransitionTime",
              "message",
              "reason",
              "status",
              "type"
            ],
            "type": "object",
            "additionalProperties": false
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "matchedNodes": {
          "description": "MatchedNodes is a list of node names that match the bridge's node selector.\nThis is used to track which nodes the bridge is deployed to.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "type": "object",
      "additionalProperties": false
    }
  },
  "required": [
    "spec"
  ],
  "type": "object"
}
